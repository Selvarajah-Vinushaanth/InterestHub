import os
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

SUPABASE_HEADERS = {
    "apikey": SUPABASE_KEY,
    "Authorization": f"Bearer {SUPABASE_KEY}",
    "Content-Type": "application/json"
}

def create_tables():
    # Create messages table
    messages_table_sql = """
    CREATE TABLE IF NOT EXISTS messages (
        id bigint primary key generated by default as identity,
        username text not null,
        message text,
        group_name text not null,
        image_url text,
        video_url text,
        audio_url text,
        created_at timestamptz default now()
    );
    """
    
    # Create groups table
    groups_table_sql = """
    CREATE TABLE IF NOT EXISTS groups (
        id bigint primary key generated by default as identity,
        name text not null unique,
        created_by text not null,
        created_at timestamptz default now()
    );
    """
    
    # Create reactions table
    reactions_table_sql = """
    CREATE TABLE IF NOT EXISTS reactions (
        id bigint primary key generated by default as identity,
        message_id bigint not null references messages(id) on delete cascade,
        username text not null,
        reaction text not null,
        created_at timestamptz default now()
    );
    """
    
    try:
        for table_name, sql in [
            ("messages", messages_table_sql),
            ("groups", groups_table_sql),
            ("reactions", reactions_table_sql)
        ]:
            print(f"Creating {table_name} table...")
            response = requests.post(
                f"{SUPABASE_URL}/rest/v1/rpc/execute_sql",
                json={"query": sql},
                headers=SUPABASE_HEADERS
            )
            
            if response.status_code == 200:
                print(f"✅ {table_name} table created or already exists")
            else:
                print(f"❌ Failed to create {table_name} table. Status: {response.status_code}")
                print(f"Response: {response.text}")
    
    except Exception as e:
        print(f"Error setting up tables: {str(e)}")

if __name__ == "__main__":
    create_tables()
    print("Schema creation complete.")
